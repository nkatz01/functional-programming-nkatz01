#reader(lib"read.ss""wxme")WXME0109 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 7.6 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 33 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(0
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(1
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(2
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(3
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 97 0 1 #"\0"
0 75 1 #"\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 12 #"Courier New\0"
0 9 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 0 36
#"mrlib/syntax-browser:subtitle-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 36 36 140 255 255 255 -1
-1 0 42 #"mrlib/syntax-browser:focused-syntax-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 34 139 34 255 255 255 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 0 1 #"\0"
0 75 12 #"Courier New\0"
0.0 9 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255 255
255 1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 150 0 150 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 175 0 0
0 -1 -1 0 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 36 36 140
255 255 255 -1 -1 0 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 34 139 34
255 255 255 -1 -1 0 1 #"\0"
0 75 12 #"Courier New\0"
0.0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 0 -1 -1 4 32 #"widget.rkt::browser-text% basic\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 59
#"macro-debugger/syntax-browser/properties color-text% basic\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 67 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 190 190 190
0 0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 255 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 107 142 35 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 100 0 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 139 0 0 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 100 149 237
0 0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 65 105 225 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 70 130 180 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 47 79 79 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 139 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 75 0 130 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 160 32 240 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 165 0 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 250 128 114
0 0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 184 134 11 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 128 128 0 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 169 169 169
0 0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 224
255 255 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 200 0 0 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 90 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
0 -1 0 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
0 -1 2 1 #"\0"
1 51 93 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
1 52 2 1 #"\0"
0 -1 1 #"\0"
0.0 4 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1           0 1547 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 28 3 12 #"#lang racket"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 15 3 23 #"define-namespace-anchor"
0 0 24 3 1 #" "
0 0 14 3 3 #"anc"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 2 #"ns"
0 0 24 3 2 #" ("
0 0 14 3 27 #"namespace-anchor->namespace"
0 0 24 3 1 #" "
0 0 14 3 3 #"anc"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 84
(4
 #";; An interactive calculator inspired by the calculator example in t"
 #"he bison manual."
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 42 #";; Import the parser and lexer generators."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 14 3 17 #"parser-tools/yacc"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 14 3 16 #"parser-tools/lex"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 9 #"prefix-in"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 20 #"parser-tools/lex-sre"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 13 #"define-tokens"
0 0 24 3 1 #" "
0 0 14 3 12 #"value-tokens"
0 0 24 3 2 #" ("
0 0 14 3 3 #"NUM"
0 0 24 3 1 #" "
0 0 14 3 3 #"VAR"
0 0 24 3 4 #"  ))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 19 #"define-empty-tokens"
0 0 24 3 1 #" "
0 0 14 3 9 #"op-tokens"
0 0 24 3 3 #" ( "
0 0 14 3 7 #"newline"
0 0 24 3 2 #"  "
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 2 #"OC"
0 0 24 3 1 #" "
0 0 14 3 2 #"CC"
0 0 24 3 1 #" "
0 0 14 3 3 #"DEL"
0 0 24 3 1 #" "
0 0 14 3 2 #"OP"
0 0 24 3 1 #" "
0 0 14 3 2 #"CP"
0 0 24 3 1 #" "
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 1 #"/"
0 0 24 3 1 #" "
0 0 14 3 2 #"||"
0 0 24 3 1 #" "
0 0 14 3 1 #"%"
0 0 24 3 3 #"   "
0 0 14 3 2 #"or"
0 0 24 3 1 #" "
0 0 14 3 2 #"&&"
0 0 24 3 1 #" "
0 0 14 3 2 #"=="
0 0 24 3 1 #" "
0 0 14 3 2 #"!="
0 0 24 3 1 #" "
0 0 14 3 2 #">="
0 0 24 3 1 #" "
0 0 14 3 2 #"<="
0 0 24 3 1 #" "
0 0 14 3 1 #">"
0 0 24 3 1 #" "
0 0 14 3 1 #"<"
0 0 24 3 2 #"  "
0 0 14 3 3 #"EOF"
0 0 24 3 1 #" "
0 0 14 3 5 #"PRINT"
0 0 24 3 1 #" "
0 0 14 3 5 #"WHILE"
0 0 24 3 1 #" "
0 0 14 3 2 #"IF"
0 0 24 3 1 #" "
0 0 14 3 4 #"ELSE"
0 0 24 3 4 #"  ))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 1 #"("
0 0 17 3 6 #"define"
0 0 17 3 1 #" "
0 0 17 3 2 #"||"
0 0 17 3 2 #" ("
0 0 17 3 6 #"lambda"
0 0 17 3 2 #" ("
0 0 17 3 1 #"a"
0 0 17 3 1 #" "
0 0 17 3 13 #"b) (or a b)))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 4 #"vars"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-hash"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 18 #"define-lex-abbrevs"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 12 #"lower-letter"
0 0 24 3 2 #" ("
0 0 14 3 2 #":/"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"a\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"z\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 12 #"upper-letter"
0 0 24 3 2 #" ("
0 0 14 3 2 #":/"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\A"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\Z"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 5 #"digit"
0 0 24 3 2 #" ("
0 0 14 3 2 #":/"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"0\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"9\""
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 5 #"calcl"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 5 #"lexer"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"   [("
0 0 14 3 3 #"eof"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 3 #"EOF"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 17 3 89
(5
 #";; recursively call the lexer on the remaining input after a tab or "
 #"space.  Returning the"
) 0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 17 3 68
#";; result of that operation.  This effectively skips all whitespace."
0 0 24 29 1 #"\n"
0 0 24 3 5 #"   [("
0 0 14 3 3 #":or"
0 0 24 3 1 #" "
0 0 21 3 5 #"#\\tab"
0 0 24 3 1 #" "
0 0 21 3 7 #"#\\space"
0 0 24 3 2 #"  "
0 0 21 3 8 #"#\\return"
0 0 24 3 1 #" "
0 0 21 3 9 #"#\\newline"
0 0 24 3 5 #"  ) ("
0 0 14 3 5 #"calcl"
0 0 24 3 1 #" "
0 0 14 3 10 #"input-port"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 17 3 35 #";; (token-newline) returns 'newline"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 17 3 33 #";   [  #\\newline (token-newline)]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 17 3 62
#";; Since (token-=) returns '=, just return the symbol directly"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"       [ ("
0 0 14 3 2 #":="
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #"  "
0 0 21 3 3 #"#\\|"
0 0 24 3 5 #")   ("
0 0 14 3 8 #"token-||"
0 0 24 3 2 #")]"
0 0 17 3 26 #";(string->symbol lexeme)];"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"   [("
0 0 14 3 3 #":or"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"=\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"+\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"-\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"*\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"/\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"%\""
0 0 24 3 1 #" "
0 0 19 3 4 #"\"&&\""
0 0 24 3 6 #"      "
0 0 19 3 4 #"\"==\""
0 0 24 3 1 #" "
0 0 19 3 4 #"\"!=\""
0 0 24 3 1 #" "
0 0 19 3 4 #"\">=\""
0 0 24 3 1 #" "
0 0 19 3 4 #"\"<=\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\">\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"<\""
0 0 24 3 3 #") ("
0 0 14 3 14 #"string->symbol"
0 0 24 3 1 #" "
0 0 14 3 6 #"lexeme"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ["
0 0 19 3 3 #"\"(\""
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 2 #"OP"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ["
0 0 19 3 3 #"\")\""
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 2 #"CP"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 19 3 3 #"\"{\""
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 2 #"OC"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ["
0 0 19 3 3 #"\"}\""
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 2 #"CC"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [ "
0 0 19 3 7 #"\"print\""
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"PRINT"
0 0 24 3 4 #"   ]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ["
0 0 21 3 3 #"#\\,"
0 0 24 3 2 #"  "
0 0 21 3 1 #"'"
0 0 14 3 3 #"DEL"
0 0 24 3 3 #"  ]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [ "
0 0 19 3 7 #"\"while\""
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"WHILE"
0 0 24 3 2 #" ]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"   [ "
0 0 19 3 4 #"\"if\""
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 2 #"IF"
0 0 24 3 2 #" ]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [ "
0 0 19 3 6 #"\"else\""
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"ELSE"
0 0 24 3 2 #" ]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 5 #";  [("
0 0 17 3 3 #":or"
0 0 17 3 1 #" "
0 0 17 3 7 #"\"print\""
0 0 17 3 1 #" "
0 0 17 3 3 #"#\\,"
0 0 17 3 1 #" "
0 0 17 3 7 #"\"while\""
0 0 17 3 1 #" "
0 0 17 3 4 #"\"if\""
0 0 17 3 1 #" "
0 0 17 3 6 #"\"else\""
0 0 17 3 3 #") ("
0 0 17 3 23 #"string->symbol lexeme)]"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"   [("
0 0 14 3 2 #":+"
0 0 24 3 2 #" ("
0 0 14 3 3 #":or"
0 0 24 3 1 #" "
0 0 14 3 12 #"lower-letter"
0 0 24 3 1 #" "
0 0 14 3 12 #"upper-letter"
0 0 24 3 4 #")) ("
0 0 14 3 9 #"token-VAR"
0 0 24 3 2 #" ("
0 0 14 3 14 #"string->symbol"
0 0 24 3 1 #" "
0 0 14 3 6 #"lexeme"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"   [("
0 0 14 3 2 #":+"
0 0 24 3 1 #" "
0 0 14 3 5 #"digit"
0 0 24 3 3 #") ("
0 0 14 3 9 #"token-NUM"
0 0 24 3 2 #" ("
0 0 14 3 14 #"string->number"
0 0 24 3 1 #" "
0 0 14 3 6 #"lexeme"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 4 #"; [("
0 0 17 3 2 #"::"
0 0 17 3 2 #" ("
0 0 17 3 2 #":+"
0 0 17 3 1 #" "
0 0 17 3 5 #"digit"
0 0 17 3 2 #") "
0 0 17 3 52 #"#\\. (:* digit)) (token-NUM (string->number lexeme))]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"   ))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"string->char"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 4 #")  ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 12 #"string->list"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 5 #"calcp"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"parser"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 5 #"start"
0 0 24 3 3 #"   "
0 0 14 3 5 #"start"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 3 #"end"
0 0 24 3 3 #"   "
0 0 14 3 3 #"EOF"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 6 #"tokens"
0 0 24 3 1 #" "
0 0 14 3 12 #"value-tokens"
0 0 24 3 1 #" "
0 0 14 3 9 #"op-tokens"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 5 #"error"
0 0 24 3 2 #" ("
0 0 15 3 2 #"\316\273"
0 0 24 3 1 #"("
0 0 14 3 3 #"ok?"
0 0 24 3 1 #" "
0 0 14 3 4 #"name"
0 0 24 3 1 #" "
0 0 14 3 5 #"value"
0 0 24 3 3 #") ("
0 0 14 3 6 #"printf"
0 0 24 3 1 #" "
0 0 19 3 22 #"\"Couldn't parse: ~a\\n\""
0 0 24 3 1 #" "
0 0 14 3 5 #"value"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 5 #"precs"
0 0 24 3 1 #" "
0 0 17 3 52 #"; left -> in order of reading. right -> backwards up"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 1 #";"
0 0 17 3 2 #" ("
0 0 17 3 5 #"right"
0 0 17 3 7 #" PRINT)"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"left"
0 0 24 3 1 #" "
0 0 14 3 3 #"DEL"
0 0 24 3 1 #")"
0 0 17 3 43 #"; change to left maybe as in tutorialpoint?"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 5 #"right"
0 0 24 3 1 #" "
0 0 14 3 1 #"="
0 0 24 3 2 #") "
0 0 17 3 23 #";from lowest to highest"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 17 3 4 #";  ("
0 0 17 3 5 #"right"
0 0 17 3 6 #" ELSE)"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 17 3 2 #"; "
0 0 17 3 3 #"  ("
0 0 17 3 5 #"right"
0 0 17 3 1 #" "
0 0 17 3 37 #"IF) ; causing shift reduce confilicts"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 4 #"left"
0 0 24 3 2 #"  "
0 0 14 3 2 #"||"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 4 #"left"
0 0 24 3 1 #" "
0 0 14 3 2 #"&&"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 4 #"left"
0 0 24 3 1 #" "
0 0 14 3 2 #"=="
0 0 24 3 1 #" "
0 0 14 3 2 #"!="
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 4 #"left"
0 0 24 3 1 #" "
0 0 14 3 2 #"<="
0 0 24 3 1 #" "
0 0 14 3 2 #">="
0 0 24 3 1 #" "
0 0 14 3 1 #"<"
0 0 24 3 1 #" "
0 0 14 3 1 #">"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 4 #"left"
0 0 24 3 1 #" "
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 1 #"+"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 4 #"left"
0 0 24 3 1 #" "
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 1 #"/"
0 0 24 3 1 #" "
0 0 14 3 1 #"%"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 5 #"right"
0 0 24 3 1 #" "
0 0 14 3 2 #"OP"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"left"
0 0 24 3 1 #" "
0 0 14 3 2 #"CP"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 5 #"right"
0 0 24 3 1 #" "
0 0 14 3 2 #"OC"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 4 #"left"
0 0 24 3 1 #" "
0 0 14 3 2 #"CC"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         )"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 7 #"grammar"
0 0 24 3 4 #"    "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 5 #"start"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"           [() "
0 0 21 3 1 #"'"
0 0 24 3 3 #"()]"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"             "
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 17 3 5 #";  [("
0 0 17 3 5 #"error"
0 0 17 3 1 #" "
0 0 17 3 12 #"start) $2]  "
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          [("
0 0 14 3 10 #"statements"
0 0 24 3 2 #") "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 28 3 1 #","
0 0 14 3 2 #"$1"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          [("
0 0 14 3 10 #"statements"
0 0 24 3 1 #" "
0 0 14 3 5 #"start"
0 0 24 3 2 #") "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 28 3 1 #","
0 0 14 3 2 #"$1"
0 0 28 3 1 #","
0 0 14 3 2 #"$2"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 10 #"statements"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 24 29 1 #"\n"
0 0 24 3 17 #"               [("
0 0 14 3 3 #"var"
0 0 24 3 1 #" "
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 3 #" ) "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 6 #"assign"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"$1"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"$3"
0 0 24 3 2 #")]"
0 0 17 3 36 #"; (begin (hash-set! vars $1 $3) $3)]"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"               [("
0 0 14 3 2 #"IF"
0 0 24 3 1 #" "
0 0 14 3 7 #"ifState"
0 0 24 3 2 #") "
0 0 14 3 2 #"$2"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"               [("
0 0 14 3 5 #"WHILE"
0 0 24 3 1 #" "
0 0 14 3 5 #"while"
0 0 24 3 2 #") "
0 0 14 3 2 #"$2"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"               [("
0 0 14 3 5 #"PRINT"
0 0 24 3 1 #" "
0 0 14 3 9 #"printVals"
0 0 24 3 3 #")  "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 8 #"for-each"
0 0 24 3 1 #" "
0 0 14 3 9 #"displayln"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"$2"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"               "
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                 "
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  )"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 7 #"ifState"
0 0 24 3 1 #" "
0 0 17 3 86
(6
 #"; It's assumed that you cannot have an if inside an if unless it's w"
 #"ithin curly braces"
) 0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 2 #"OP"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #" "
0 0 14 3 2 #"CP"
0 0 24 3 1 #" "
0 0 14 3 10 #"statements"
0 0 24 3 2 #") "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"$2"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"$4"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"         [("
0 0 14 3 2 #"OP"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #" "
0 0 14 3 2 #"CP"
0 0 24 3 1 #" "
0 0 14 3 5 #"block"
0 0 24 3 2 #") "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"$2"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"$4"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"       "
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 2 #"OP"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #" "
0 0 14 3 2 #"CP"
0 0 24 3 1 #" "
0 0 14 3 5 #"block"
0 0 24 3 1 #" "
0 0 14 3 4 #"ELSE"
0 0 24 3 1 #" "
0 0 14 3 10 #"statements"
0 0 24 3 3 #" ) "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"$2"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"$4"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"$6"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 2 #"OP"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #" "
0 0 14 3 2 #"CP"
0 0 24 3 1 #" "
0 0 14 3 10 #"statements"
0 0 24 3 1 #" "
0 0 14 3 4 #"ELSE"
0 0 24 3 1 #" "
0 0 14 3 5 #"block"
0 0 24 3 3 #" ) "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"$2"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"$4"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"$6"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"         [("
0 0 14 3 2 #"OP"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #" "
0 0 14 3 2 #"CP"
0 0 24 3 1 #" "
0 0 14 3 10 #"statements"
0 0 24 3 1 #" "
0 0 14 3 4 #"ELSE"
0 0 24 3 1 #" "
0 0 14 3 10 #"statements"
0 0 24 3 3 #" ) "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"$2"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"$4"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"$6"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"       "
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 2 #"OP"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #" "
0 0 14 3 2 #"CP"
0 0 24 3 1 #" "
0 0 14 3 5 #"block"
0 0 24 3 1 #" "
0 0 14 3 4 #"ELSE"
0 0 24 3 1 #" "
0 0 14 3 5 #"block"
0 0 24 3 3 #" ) "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"$2"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"$4"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"$6"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               )"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 5 #"while"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  [("
0 0 14 3 2 #"OP"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #" "
0 0 14 3 2 #"CP"
0 0 24 3 1 #" "
0 0 14 3 5 #"block"
0 0 24 3 2 #") "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 5 #"while"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"$2"
0 0 28 3 1 #","
0 0 24 3 1 #" "
0 0 14 3 2 #"$4"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 5 #"block"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"   [("
0 0 14 3 2 #"OC"
0 0 24 3 1 #" "
0 0 14 3 5 #"start"
0 0 24 3 1 #" "
0 0 14 3 2 #"CC"
0 0 24 3 2 #") "
0 0 14 3 2 #"$2"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   )"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 3 #"var"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          [("
0 0 14 3 3 #"VAR"
0 0 24 3 2 #") "
0 0 14 3 2 #"$1"
0 0 24 3 1 #"]"
0 0 17 3 68
(7
 #"; (hash-ref vars $1 (lambda () (printf \"var '~a' not-found\"  $1 ))"
 #")]"
) 0 0 24 29 1 #"\n"
0 0 24 3 11 #"          )"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 9 #"printVals"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          [("
0 0 14 3 3 #"exp"
0 0 24 3 1 #" "
0 0 14 3 3 #"DEL"
0 0 24 3 1 #" "
0 0 14 3 9 #"printVals"
0 0 24 3 3 #" ) "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 28 3 1 #","
0 0 14 3 2 #"$1"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"$3"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          [("
0 0 14 3 3 #"exp"
0 0 24 3 2 #") "
0 0 14 3 2 #"$1"
0 0 24 3 11 #"]          "
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      )"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 3 #"exp"
0 0 24 3 3 #" [("
0 0 14 3 3 #"NUM"
0 0 24 3 3 #")  "
0 0 14 3 2 #"$1"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          [("
0 0 14 3 3 #"VAR"
0 0 24 3 3 #")  "
0 0 14 3 2 #"$1"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 24 29 1 #"\n"
0 0 24 3 7 #"       "
0 0 24 29 1 #"\n"
0 0 24 3 11 #"         [("
0 0 14 3 3 #"exp"
0 0 24 3 1 #" "
0 0 14 3 2 #"||"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #") "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 2 #"or"
0 0 24 3 2 #"  "
0 0 28 3 1 #","
0 0 14 3 2 #"$1"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"$3"
0 0 24 3 5 #") ]  "
0 0 24 29 1 #"\n"
0 0 24 3 11 #"         [("
0 0 14 3 3 #"exp"
0 0 24 3 1 #" "
0 0 14 3 2 #"&&"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #") "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 3 #"and"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"$1"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"$3"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"         [("
0 0 14 3 3 #"exp"
0 0 24 3 1 #" "
0 0 14 3 2 #"=="
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #") "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"$1"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"$3"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"         [("
0 0 14 3 3 #"exp"
0 0 24 3 1 #" "
0 0 14 3 2 #"!="
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #") "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 3 #"not"
0 0 24 3 1 #"("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"$1"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"$3"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"         [("
0 0 14 3 3 #"exp"
0 0 24 3 1 #" "
0 0 14 3 1 #"<"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #") "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 1 #"<"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"$1"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"$3"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"         [("
0 0 14 3 3 #"exp"
0 0 24 3 1 #" "
0 0 14 3 1 #">"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #") "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 1 #">"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"$1"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"$3"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"         [("
0 0 14 3 3 #"exp"
0 0 24 3 1 #" "
0 0 14 3 2 #">="
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #") "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 2 #">="
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"$1"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"$3"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"         [("
0 0 14 3 3 #"exp"
0 0 24 3 1 #" "
0 0 14 3 2 #"<="
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #") "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 2 #"<="
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"$1"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"$3"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"         [("
0 0 14 3 3 #"exp"
0 0 24 3 1 #" "
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #") "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"$1"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"$3"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"         [("
0 0 14 3 3 #"exp"
0 0 24 3 1 #" "
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #") "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"$1"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"$3"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"         [("
0 0 14 3 3 #"exp"
0 0 24 3 1 #" "
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #") "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"$1"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"$3"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"         [("
0 0 14 3 3 #"exp"
0 0 24 3 1 #" "
0 0 14 3 1 #"/"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #") "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 8 #"quotient"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"$1"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"$3"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"         [("
0 0 14 3 3 #"exp"
0 0 24 3 1 #" "
0 0 14 3 1 #"%"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #") "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 14 3 6 #"modulo"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"$1"
0 0 24 3 1 #" "
0 0 28 3 1 #","
0 0 14 3 2 #"$3"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"         [("
0 0 14 3 2 #"OP"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #" "
0 0 14 3 2 #"CP"
0 0 24 3 2 #") "
0 0 14 3 2 #"$2"
0 0 24 3 2 #"])"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 2 #" )"
0 0 24 29 1 #"\n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 24 29 1 #"\n"
0 0 17 3 52 #";; run the calculator on the given input-port       "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"define"
0 0 24 3 3 #"  ("
0 0 14 3 9 #"seeTokens"
0 0 24 3 1 #" "
0 0 14 3 2 #"ip"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"letrec"
0 0 24 3 3 #" (("
0 0 14 3 8 #"calclRec"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 15 3 6 #"lambda"
0 0 24 3 3 #" ()"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"             "
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 15 3 3 #"let"
0 0 24 3 4 #"  (("
0 0 14 3 7 #"results"
0 0 24 3 2 #" ("
0 0 14 3 5 #"calcl"
0 0 24 3 1 #" "
0 0 14 3 2 #"ip"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 )"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 5 #"print"
0 0 24 3 1 #" "
0 0 14 3 7 #"results"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 15 3 6 #"unless"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 7 #"results"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"EOF"
0 0 24 3 3 #") ("
0 0 14 3 8 #"calclRec"
0 0 24 3 8 #") )  ) )"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"           )) ("
0 0 14 3 8 #"calclRec"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 9 #"seeTokens"
0 0 17 3 2 #" ("
0 0 17 3 17 #"open-input-string"
0 0 17 3 36 #" \"if (1 < 2) print 1 else print 0\"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"calceval"
0 0 24 3 1 #" "
0 0 14 3 2 #"ip"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 5 #"calcp"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 5 #" () ("
0 0 14 3 5 #"calcl"
0 0 24 3 1 #" "
0 0 14 3 2 #"ip"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"calcres"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 2 #"in"
0 0 24 3 3 #") ("
0 0 14 3 8 #"calceval"
0 0 24 3 2 #" ("
0 0 14 3 17 #"open-input-string"
0 0 24 3 1 #" "
0 0 14 3 2 #"in"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 9         157 21           0 0           0 25 0 24 3 1 #"("
0 0 14 3 7 #"calcres"
0 0 24 3 1 #" "
0 0 19 3 26 #"\"cmmExamples/example1.cmm\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 7 #"calcres"
0 0 24 3 1 #" "
0 0 19 3 26 #"\"cmmExamples/example2.cmm\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 7 #"calcres"
0 0 24 3 1 #" "
0 0 19 3 26 #"\"cmmExamples/example3.cmm\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 7 #"calcres"
0 0 24 3 1 #" "
0 0 19 3 26 #"\"cmmExamples/example4.cmm\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0           0 0 0 24 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 7 #"calcres"
0 0 17 3 3 #"   "
0 0 17 3 27 #"\"cmmExamples/example1.cmm\")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 3 #"res"
0 0 24 3 3 #" ( "
0 0 14 3 7 #"calcres"
0 0 24 3 1 #" "
0 0 19 3 24 #"\"a = 0 b = a  c = a + b\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 14 3 3 #"res"
0 0 24 29 1 #"\n"
0 9         481 21           0 0           0 79 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 7 #"evalExp"
0 0 24 3 1 #" "
0 0 14 3 6 #"assign"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 5 #"begin"
0 0 24 3 2 #" ("
0 0 14 3 9 #"hash-set!"
0 0 24 3 1 #" "
0 0 14 3 4 #"vars"
0 0 24 3 3 #" ( "
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 6 #"assign"
0 0 24 3 4 #")  ("
0 0 14 3 4 #"eval"
0 0 24 3 2 #" ("
0 0 14 3 5 #"third"
0 0 24 3 1 #" "
0 0 14 3 6 #"assign"
0 0 24 3 2 #") "
0 0 14 3 2 #"ns"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"extractState"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"     [("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 3 #")  "
0 0 14 3 3 #"lst"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"     [("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 6 #"assign"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 4 #")) ("
0 0 15 3 5 #"begin"
0 0 24 3 2 #" ("
0 0 14 3 7 #"evalExp"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 6 #"))   ("
0 0 14 3 12 #"extractState"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 9 #")))) ] ))"
0           0 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 17 3 2 #";("
0 0 17 3 8 #"hash-ref"
0 0 17 3 1 #" "
0 0 17 3 4 #"vars"
0 0 17 3 3 #" ( "
0 0 17 3 6 #"second"
0 0 17 3 1 #" "
0 0 17 3 6 #"assign"
0 0 17 3 3 #") ("
0 0 17 3 6 #"lambda"
0 0 17 3 5 #" () ("
0 0 17 3 6 #"printf"
0 0 17 3 1 #" "
0 0 17 3 20 #"\"var '~a' not-found\""
0 0 17 3 4 #"  ( "
0 0 17 3 6 #"second"
0 0 17 3 1 #" "
0 0 17 3 11 #"assign) )))"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 7 #"evalExp"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 1 #"("
0 0 17 3 6 #"assign"
0 0 17 3 1 #" "
0 0 17 3 1 #"a"
0 0 17 3 1 #" "
0 0 17 3 3 #"1))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 17 3 68
(8
 #";(hash-ref vars  'fish  (lambda ()  \"not-found\")) ; looking up a v"
 #"ar"
) 0 0 24 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 9 #"hash-set!"
0 0 17 3 1 #" "
0 0 17 3 4 #"vars"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 1 #"b"
0 0 17 3 2 #" ("
0 0 17 3 8 #"hash-ref"
0 0 17 3 1 #" "
0 0 17 3 4 #"vars"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 1 #"a"
0 0 17 3 2 #" ("
0 0 17 3 6 #"lambda"
0 0 17 3 3 #"() "
0 0 17 3 52 #"\"not found\"))) ; assigning value of 1 var to another"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 29 1 #"\n"
0 0 17 3 68
#";(with-handlers ([exn:fail:contract? (lambda (exn) #f)]) (+ 1 'egg))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 13 #"extractState0"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"     [  ("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 3 #")  "
0 0 14 3 3 #"lst"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"     [("
0 0 15 3 5 #"begin"
0 0 24 3 2 #" ("
0 0 14 3 6 #"printf"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"~a\\n\""
0 0 24 3 3 #"  ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 4 #")) ("
0 0 14 3 13 #"extractState0"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 3 #"lst"
0 0 24 3 7 #"))))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"trackVar"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #") "
0 0 14 3 3 #"exp"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 8 #"trackVar"
0 0 24 3 2 #" ("
0 0 14 3 8 #"hash-ref"
0 0 24 3 1 #" "
0 0 14 3 4 #"vars"
0 0 24 3 2 #"  "
0 0 14 3 3 #"exp"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 5 #" ()  "
0 0 19 3 11 #"\"not-found\""
0 0 24 3 8 #")))]))  "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 9           7 21           0 0           0 0           0 0 0 24 29 1
#"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 17 3 18 #"; (extractState  )"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 4 #"eval"
0 0 17 3 3 #"   "
0 0 17 3 1 #"'"
0 0 17 3 1 #"("
0 0 17 3 2 #">="
0 0 17 3 2 #" ("
0 0 17 3 1 #"-"
0 0 17 3 1 #" "
0 0 17 3 1 #"5"
0 0 17 3 1 #" "
0 0 17 3 1 #"3"
0 0 17 3 2 #") "
0 0 17 3 1 #"2"
0 0 17 3 6 #") ns )"
0 0 24 29 1 #"\n"
0 9        2929 21           0 0           0 487 0 24 3 2 #" ("
0 0 14 3 7 #"calcres"
0 0 24 3 1 #" "
0 0 19 3 51 #"\"if (fish > 7){ print 1 print 8 } else { print 0 }\""
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 14 3 7 #"calcres"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"fish = 7"
0 0 19 29 1 #"\n"
0 0 19 3 9 #"bread = 9"
0 0 19 29 1 #"\n"
0 0 19 3 87
(9
 #"print eggs, fish, bread if (fish > 7){ print 1 print 8 } else { prin"
 #"t 0 print bugger }\""
) 0 0 24 3 2 #" )"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"calcres"
0 0 24 3 1 #" "
0 0 19 3 43 #"\"if (fish > 7){ print 1 } else { print 0 }\""
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"calcres"
0 0 24 3 1 #" "
0 0 19 3 41 #"\"if (fish > 7)  print 1   else   print 0\""
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"calcres"
0 0 24 3 1 #" "
0 0 19 3 24 #"\"if (fish > 7)  print 1\""
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"calcres"
0 0 24 3 1 #" "
0 0 19 3 20 #"\"while (val < 100) {"
0 0 19 29 1 #"\n"
0 0 19 3 13 #"    print val"
0 0 19 29 1 #"\n"
0 0 19 3 18 #"    val = 2 * val "
0 0 19 29 1 #"\n"
0 0 19 3 2 #"}\""
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 19 3 33 #"\"if (1 < 2) print 1 else print 0\""
0 0 24 29 1 #"\n"
0 0 14 3 4 #"fish"
0 0 24 3 1 #" "
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 21 3 1 #"7"
0 0 24 29 1 #"\n"
0 0 14 3 5 #"bread"
0 0 24 3 1 #" "
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 21 3 1 #"9"
0 0 24 29 1 #"\n"
0 0 14 3 5 #"print"
0 0 24 3 1 #" "
0 0 14 3 4 #"eggs"
0 0 28 3 1 #","
0 0 24 3 1 #" "
0 0 14 3 4 #"fish"
0 0 28 3 1 #","
0 0 24 3 1 #" "
0 0 14 3 5 #"bread"
0 0 19 3 3 #"\"))"
0 0 19 29 1 #"\n"
0 0 19 3 2 #" ("
0 0 19 3 9 #"calceval "
0 0 19 3 2 #"ip"
0 0 19 3 3 #"  )"
0 0 19 29 1 #"\n"
0 0 19 29 1 #"\n"
0 0 19 3 31 #" (seeTokens (open-input-string\""
0 0 14 3 4 #"eggs"
0 0 24 3 1 #" "
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 3 #"6+7"
0 0 24 29 1 #"\n"
0 0 14 3 4 #"fish"
0 0 24 3 1 #" "
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 21 3 1 #"7"
0 0 24 29 1 #"\n"
0 0 14 3 5 #"bread"
0 0 24 3 1 #" "
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 21 3 1 #"9"
0 0 24 29 1 #"\n"
0 0 14 3 5 #"print"
0 0 24 3 1 #" "
0 0 14 3 4 #"eggs"
0 0 28 3 1 #","
0 0 24 3 1 #" "
0 0 14 3 4 #"fish"
0 0 28 3 1 #","
0 0 24 3 1 #" "
0 0 14 3 5 #"bread"
0 0 19 3 1 #"\""
0 0 19 3 3 #") )"
0 0 19 29 1 #"\n"
0 0 19 29 1 #"\n"
0 0 19 29 1 #"\n"
0 0 19 29 1 #"\n"
0 0 19 29 1 #"\n"
0 0 19 29 1 #"\n"
0 0 19 3 1 #" "
0 0 19 29 1 #"\n"
0 0 19 29 1 #"\n"
0 0 19 3 2 #" \""
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 14 3 1 #">"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 14 3 5 #"print"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 14 3 5 #"print"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 19 3 1 #"\""
0 0 19 29 1 #"\n"
0 0 19 3 2 #" ("
0 0 19 3 9 #"seeTokens"
0 0 19 3 2 #" ("
0 0 19 3 19 #"open-input-string \""
0 0 14 3 4 #"eggs"
0 0 24 3 1 #" "
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 3 #"6+7"
0 0 24 29 1 #"\n"
0 0 14 3 4 #"fish"
0 0 24 3 1 #" "
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 21 3 1 #"7"
0 0 24 29 1 #"\n"
0 0 14 3 5 #"bread"
0 0 24 3 1 #" "
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 21 3 1 #"9"
0 0 24 29 1 #"\n"
0 0 14 3 5 #"print"
0 0 24 3 1 #" "
0 0 14 3 4 #"eggs"
0 0 28 3 1 #","
0 0 24 3 1 #" "
0 0 14 3 4 #"fish"
0 0 28 3 1 #","
0 0 24 3 1 #" "
0 0 14 3 5 #"bread"
0 0 19 3 1 #"\""
0 0 19 3 3 #") )"
0 0 19 29 1 #"\n"
0 0 19 29 1 #"\n"
0 0 19 29 1 #"\n"
0 0 19 3 1 #"("
0 0 19 3 6 #"define"
0 0 19 3 2 #" ("
0 0 19 3 9 #"calceval "
0 0 19 3 2 #"ip"
0 0 19 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 4 #"   ("
0 0 19 3 17 #"port-count-lines!"
0 0 19 3 1 #" "
0 0 19 3 2 #"ip"
0 0 19 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 3 #"  ("
0 0 19 3 6 #"letrec"
0 0 19 3 3 #" (("
0 0 19 3 8 #"one-line"
0 0 19 29 1 #"\n"
0 1 19 65 1 #"\t"
0 0 19 3 5 #"    ("
0 0 19 3 6 #"lambda"
0 0 19 3 3 #" ()"
0 0 19 29 1 #"\n"
0 0 19 3 15 #"              ("
0 0 19 3 3 #"let"
0 0 19 3 3 #" (("
0 0 19 3 6 #"result"
0 0 19 3 2 #" ("
0 0 19 3 5 #"calcp"
0 0 19 3 2 #" ("
0 0 19 3 6 #"lambda"
0 0 19 3 3 #" ()"
0 0 19 29 1 #"\n"
0 0 19 3 38 #"                                     ("
0 0 19 3 5 #"calcl"
0 0 19 3 1 #" "
0 0 19 3 2 #"ip"
0 0 19 3 9 #")  )  )))"
0 0 19 29 1 #"\n"
0 0 19 3 18 #"                 ("
0 0 19 3 8 #"printf \""
0 0 14 3 4 #"~a\\n"
0 0 19 3 1 #"\""
0 0 19 3 1 #" "
0 0 19 3 6 #"result"
0 0 19 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 17 #"                ("
0 0 19 3 6 #"unless"
0 0 19 3 2 #" ("
0 0 19 3 6 #"equal?"
0 0 19 3 1 #" "
0 0 19 3 6 #"result"
0 0 19 3 1 #" "
0 0 19 3 2 #"#f"
0 0 19 3 5 #")   ("
0 0 19 3 8 #"one-line"
0 0 19 3 2 #"))"
0 0 19 29 1 #"\n"
0 0 19 3 17 #"                )"
0 0 19 29 1 #"\n"
0 0 19 3 21 #"                 ) ))"
0 0 19 29 1 #"\n"
0 0 19 3 5 #"    ("
0 0 19 3 8 #"one-line"
0 0 19 3 2 #"))"
0 0 19 29 1 #"\n"
0 0 19 3 3 #"  )"
0 0 19 29 1 #"\n"
0 0 19 3 1 #" "
0 0 19 29 1 #"\n"
0 0 19 3 33 #";(define ip (open-input-string  \""
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 14 3 1 #">"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #") "
0 0 14 3 5 #"print"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 14 3 5 #"print"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 19 3 3 #"\"))"
0 0 19 29 1 #"\n"
0 0 19 29 1 #"\n"
0 0 19 29 1 #"\n"
0 0 19 3 1 #"("
0 0 19 3 18 #"for-each displayln"
0 0 19 3 2 #" ("
0 0 19 3 4 #"list"
0 0 19 3 1 #" "
0 0 19 3 2 #"-1"
0 0 19 3 1 #" "
0 0 19 3 1 #"2"
0 0 19 3 1 #" "
0 0 19 3 2 #"-3"
0 0 19 3 1 #" "
0 0 19 3 1 #"4"
0 0 19 3 2 #"))"
0 0 19 29 1 #"\n"
0 0 19 29 1 #"\n"
0 0 19 3 1 #"\""
0 0 14 3 4 #"eggs"
0 0 24 3 1 #" "
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 2 #"6+"
0 0 24 29 1 #"\n"
0 0 21 3 1 #"9"
0 0 24 29 1 #"\n"
0 0 14 3 5 #"total"
0 0 24 3 1 #" "
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 4 #"eggs"
0 0 19 3 1 #"\""
0 0 19 29 1 #"\n"
0 0 19 29 1 #"\n"
0 0 19 29 1 #"\n"
0 0 19 3 1 #"("
0 0 19 3 6 #"define"
0 0 19 3 2 #" ("
0 0 19 3 9 #"calceval "
0 0 19 3 2 #"ip"
0 0 19 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 4 #"   ("
0 0 19 3 17 #"port-count-lines!"
0 0 19 3 1 #" "
0 0 19 3 2 #"ip"
0 0 19 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 3 #"  ("
0 0 19 3 6 #"letrec"
0 0 19 3 3 #" (("
0 0 19 3 8 #"one-line"
0 0 19 29 1 #"\n"
0 1 19 65 1 #"\t"
0 0 19 3 5 #"    ("
0 0 19 3 6 #"lambda"
0 0 19 3 3 #" ()"
0 0 19 29 1 #"\n"
0 0 19 3 15 #"              ("
0 0 19 3 3 #"let"
0 0 19 3 3 #" (("
0 0 19 3 6 #"result"
0 0 19 3 2 #" ("
0 0 19 3 5 #"calcp"
0 0 19 3 2 #" ("
0 0 19 3 6 #"lambda"
0 0 19 3 3 #" ()"
0 0 19 29 1 #"\n"
0 0 19 3 38 #"                                     ("
0 0 19 3 5 #"calcl"
0 0 19 3 1 #" "
0 0 19 3 2 #"ip"
0 0 19 3 9 #")  )  )))"
0 0 19 29 1 #"\n"
0 0 19 3 17 #"                ("
0 0 19 3 4 #"when"
0 0 19 3 1 #" "
0 0 19 3 6 #"result"
0 0 19 3 2 #" ("
0 0 19 3 4 #"when"
0 0 19 3 3 #"  ("
0 0 19 3 3 #"not"
0 0 19 3 1 #"("
0 0 19 3 6 #"equal?"
0 0 19 3 1 #" "
0 0 19 3 6 #"result"
0 0 19 3 1 #" "
0 0 19 3 4 #"void"
0 0 19 3 4 #")) ("
0 0 19 3 8 #"printf \""
0 0 14 3 4 #"~a\\n"
0 0 19 3 1 #"\""
0 0 19 3 1 #" "
0 0 19 3 6 #"result"
0 0 19 3 5 #"))  ("
0 0 19 3 8 #"one-line"
0 0 19 3 2 #"))"
0 0 19 29 1 #"\n"
0 0 19 3 17 #"                )"
0 0 19 29 1 #"\n"
0 0 19 3 21 #"                 ) ))"
0 0 19 29 1 #"\n"
0 0 19 3 5 #"    ("
0 0 19 3 8 #"one-line"
0 0 19 3 2 #"))"
0 0 19 29 1 #"\n"
0 0 19 3 3 #"  )"
0 0 19 29 1 #"\n"
0 0 19 3 56 #";(define (calcres ip) (calceval (open-input-string ip)))"
0 0 19 29 1 #"\n"
0 0 19 29 1 #"\n"
0 0 19 3 1 #"("
0 0 19 3 6 #"define"
0 0 19 3 3 #"  ("
0 0 19 3 9 #"seeTokens"
0 0 19 3 1 #" "
0 0 19 3 2 #"ip"
0 0 19 3 1 #" "
0 0 19 3 3 #"lst"
0 0 19 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 3 #"  ("
0 0 19 3 6 #"letrec"
0 0 19 3 3 #" (("
0 0 19 3 8 #"calclRec"
0 0 19 29 1 #"\n"
0 0 19 3 12 #"           ("
0 0 19 3 6 #"lambda"
0 0 19 3 3 #" ()"
0 0 19 29 1 #"\n"
0 0 19 3 13 #"             "
0 0 19 29 1 #"\n"
0 0 19 3 14 #"             ("
0 0 19 3 3 #"let"
0 0 19 3 4 #"  (("
0 0 19 3 7 #"results"
0 0 19 3 2 #" ("
0 0 19 3 5 #"calcl"
0 0 19 3 1 #" "
0 0 19 3 2 #"ip"
0 0 19 3 2 #"))"
0 0 19 29 1 #"\n"
0 0 19 3 18 #"                 )"
0 0 19 29 1 #"\n"
0 0 19 3 16 #"               ("
0 0 19 3 5 #"print"
0 0 19 3 1 #" "
0 0 19 3 7 #"results"
0 0 19 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 16 #"               ("
0 0 19 3 2 #"if"
0 0 19 3 2 #" ("
0 0 19 3 6 #"equal?"
0 0 19 3 1 #" "
0 0 19 3 7 #"results"
0 0 19 3 1 #" "
0 0 19 3 1 #"'"
0 0 19 3 3 #"EOF"
0 0 19 3 2 #") "
0 0 19 3 5 #"empty"
0 0 19 3 2 #" ("
0 0 19 3 8 #"calclRec"
0 0 19 3 8 #") )  ) )"
0 0 19 29 1 #"\n"
0 0 19 3 15 #"           )) ("
0 0 19 3 8 #"calclRec"
0 0 19 3 2 #"))"
0 0 19 29 1 #"\n"
0 0 19 3 3 #"  )"
0 0 19 29 1 #"\n"
0 0 19 29 1 #"\n"
0 0 19 29 1 #"\n"
0 0 19 3 2 #" ("
0 0 19 3 6 #"define"
0 0 19 3 2 #" ("
0 0 19 3 10 #"extractExp"
0 0 19 3 1 #" "
0 0 19 3 3 #"lst"
0 0 19 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 4 #"   ("
0 0 19 3 4 #"cond"
0 0 19 29 1 #"\n"
0 0 19 3 7 #"     [("
0 0 19 3 6 #"empty?"
0 0 19 3 1 #" "
0 0 19 3 3 #"lst"
0 0 19 3 2 #") "
0 0 19 3 3 #"lst"
0 0 19 3 1 #"]"
0 0 19 29 1 #"\n"
0 0 19 3 7 #"     [("
0 0 19 3 5 #"begin"
0 0 19 3 2 #" ("
0 0 19 3 8 #"printf \""
0 0 14 3 4 #"~a\\n"
0 0 19 3 1 #"\""
0 0 19 3 2 #"  "
0 0 19 3 3 #"lst"
0 0 19 3 3 #") ("
0 0 19 3 10 #"extractExp"
0 0 19 3 2 #" ("
0 0 19 3 4 #"rest"
0 0 19 3 1 #" "
0 0 19 3 9 #"lst)))]))"
0 0 19 29 1 #"\n"
0 0 19 29 1 #"\n"
0 0 19 3 26 #"(define (extractState lst)"
0 0 19 29 1 #"\n"
0 0 19 3 8 #"   (cond"
0 0 19 29 1 #"\n"
0 0 19 3 45 #"     [(or (empty? lst) (not(list? lst))) lst]"
0 0 19 29 1 #"\n"
0 0 19 3 22 #"     [(begin (printf \""
0 0 14 3 4 #"~a\\n"
0 0 26 3 53 #"\"  (first lst)) (extractState (first (rest lst))))]))"
0           0 0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 9          97 21           0 0           0 15 0 24 3 2 #" ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"tokenres"
0 0 24 3 3 #"  ("
0 0 14 3 5 #"calcl"
0 0 24 3 2 #" ("
0 0 14 3 17 #"open-input-string"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"1 + 2"
0 0 19 29 1 #"\n"
0 0 19 3 4 #"- 3\""
0 0 24 3 5 #"))  )"
0 0 24 29 1 #"\n"
0 0 14 3 8 #"tokenres"
0           0 0 0 24 29 1 #"\n"
0 9         883 21           0 0           0 146 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 4 #"calc"
0 0 24 3 1 #" "
0 0 14 3 2 #"ip"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 17 #"port-count-lines!"
0 0 24 3 1 #" "
0 0 14 3 2 #"ip"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"letrec"
0 0 24 3 3 #" (("
0 0 14 3 8 #"one-line"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 24 3 3 #" ()"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 6 #"result"
0 0 24 3 2 #" ("
0 0 14 3 5 #"calcp"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 3 #" ()"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 15 3 3 #"let"
0 0 24 3 4 #"  (("
0 0 14 3 5 #"token"
0 0 24 3 3 #"  ("
0 0 14 3 5 #"calcl"
0 0 24 3 1 #" "
0 0 14 3 2 #"ip"
0 0 24 3 3 #") ("
0 0 15 3 4 #"when"
0 0 24 3 1 #" "
0 0 14 3 5 #"token"
0 0 24 3 2 #" ("
0 0 14 3 6 #"printf"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"~a\\n\""
0 0 24 3 1 #" "
0 0 14 3 5 #"token"
0 0 24 3 8 #")) )) ))"
0 0 24 29 1 #"\n"
0 0 24 3 39 #"                                   )) )"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 15 3 4 #"when"
0 0 24 3 1 #" "
0 0 14 3 6 #"result"
0 0 24 3 2 #" ("
0 0 14 3 6 #"printf"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"~a\\n\""
0 0 24 3 1 #" "
0 0 14 3 6 #"result"
0 0 24 3 4 #")  ("
0 0 14 3 8 #"one-line"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                )"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                 ) ))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 8 #"one-line"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 4 #"calc"
0 0 24 3 1 #" "
0 0 14 3 2 #"ip"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 17 #"port-count-lines!"
0 0 24 3 1 #" "
0 0 14 3 2 #"ip"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"letrec"
0 0 24 3 3 #" (("
0 0 14 3 8 #"one-line"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 24 3 3 #" ()"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 6 #"result"
0 0 24 3 2 #" ("
0 0 14 3 5 #"calcp"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 3 #" ()"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                     ("
0 0 14 3 5 #"calcl"
0 0 24 3 1 #" "
0 0 14 3 2 #"ip"
0 0 24 3 9 #")  )  )))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 15 3 4 #"when"
0 0 24 3 1 #" "
0 0 14 3 6 #"result"
0 0 24 3 2 #" ("
0 0 14 3 6 #"printf"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"~a\\n\""
0 0 24 3 1 #" "
0 0 14 3 6 #"result"
0 0 24 3 4 #")  ("
0 0 14 3 8 #"one-line"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                )"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                 ) ))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 8 #"one-line"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0           0 0 0 24 29 1 #"\n"
0           0
